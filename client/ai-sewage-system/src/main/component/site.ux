<template>
  <div class="site-page">
    <div class="header">
      <select class="select" @change="selectChange">
        <option value="{{site.boxNo}}" for="{{site in siteArray}}" selected="{{site.name == '测试平台'}}">{{site.name}}</option>
      </select>
      <input type="button" value="报警信息" style="background-color: #ff8c00; border:2px solid #ffffff; border-radius:25px;" onclick="showEquipException"></input>
    </div>
    <div class="main">
      <div class="swiper-container">
        <swiper class="swiper" autoplay="true">
          <image src="../../Common/pic/EquipState.png" style="object-fit: cover"></image>
          <image src="../../Common/pic/Equip1.jpg" style="object-fit: cover"></image>
          <image src="../../Common/pic/Equip2.jpg" style="object-fit: cover"></image>
          <image src="../../Common/pic/Equip3.jpg" style="object-fit: cover"></image>
        </swiper>
      </div>
      <div class="canvas-container">
        <canvas id="equip-state" @appear="drawEquipStateCanvas" @disappear="clearLineCanvasTimerTask"></canvas>
        <canvas id="equip-pie" @appear="drawPieChartCanvas" @disappear="clearPieCanvasTimerTask"></canvas>
      </div>
    </div>
    <div class="control-container" for="{{element in controlArray}}">
      <input for="{{equip in element.equipGroup}}" class="control-btn" type="button" onclick="undo" value="{{equip}}"/>
    </div>
  </div>
</template>

<script>
import Chart from '../../Common/js/Chart.js'
import config from './../../config'
const baseurl = config.server.addr
export default {
  data: {
    siteArray: [],
    equipArray: [],
    controlArray: [],
    equipCanvasData: {},
    lineNames: [],
    lineConfig: {},
    pieConfig: {},
    lineCanvasTimer: {},
    pieCanvasTimer: {}
  },
  onInit() {
    this.siteArray = getSiteArray(this.$app.$data.equipmentList,this.$app.$data.userArea)
  },
  clearLineCanvasTimerTask () {
    clearInterval(this.lineCanvasTimer)
  },
  clearPieCanvasTimerTask () {
    clearInterval(this.pieCanvasTimer)
  },
  drawEquipStateCanvas () {
    const canvas = this.$element('equip-state') // 获取canvas组件
    const ctx = canvas.getContext('2d') // 获取canvas绘图上下文
    // 初始化设备图表数值
    this.equipCanvasData = initEquipCanvasData(this.lineNames)
    this.refreshEquipCanvasData() //更新一次数据,避免两点间连线的空值异常
    let lineChart = this.drawLineChart(ctx)
    // 启动图表定时刷新任务
    this.lineCanvasTimer = setInterval(() => {
      this.refreshEquipCanvasData()
      lineChart.update()
    }, 5000)
  },
  drawLineChart(ctx) {
    this.lineConfig = {
      wh:[400, 750], 
      type: 'line',
      data: this.equipCanvasData, 
      options: {
        responsive: true,
        title: {
          display: true,
          fontSize: 30,
          text: '站点状态 (疫情期间无法返校 采用模拟数值)'
        },
        tooltips: {
          mode: 'index',
          intersect: false,
        },
        hover: {
          mode: 'nearest',
          intersect: false
        },
      }
    }
    return new Chart(ctx, this.lineConfig)
  },
  drawPieChartCanvas() {
    const canvas = this.$element('equip-pie') // 获取canvas组件
    const ctx = canvas.getContext('2d') // 获取canvas绘图上下文
    // 极地图
    this.pieConfig = {
      wh:[400, 750], 
      type: 'polarArea',
      options: {
        title: {
          display: true,
          fontSize: 30,
          text: '当前数据 (疫情期间无法返校 采用模拟数值)'
        },
        legend: {
          position: 'left'
        }
      },
      data: this.refreshPieData()
    }
    let pieChart = new Chart(ctx, this.pieConfig)
    this.pieCanvasTimer = setInterval(() => {
      this.pieConfig.data = this.refreshPieData()
      pieChart.update()
    }, 5000)
  },
  // 根据折线图数据解析极地图数据
  refreshPieData () {
    let pieData = {
      datasets: [
        {
          data: [],
          backgroundColor: []
        }
      ],
      labels: []
    }
    let lineData = this.equipCanvasData
    if (lineData.datasets != undefined) {
      lineData.datasets.forEach(item => {
        let name = item.label
        let value = item.data[item.data.length - 1] //取最新一个值
        let color = item.backgroundColor
        pieData.labels.push(name)
        pieData.datasets[0].data.push(value)
        pieData.datasets[0].backgroundColor.push(color)
      })
    }
    return pieData
  },
  selectChange (e) {
    let boxNo = e.newValue
    for (let i = 0; i < this.siteArray.length; i++) {
      const site = this.siteArray[i]
      if (site.boxNo == boxNo) {
        if (site.name != '测试平台') {
          this.$app.$def.alert('由于疫情无法返校的原因导致设备无法开放配置, 仅开放测试平台用于测试')
          let temp = this.siteArray
          this.siteArray = []
          this.$forceUpdate()
          this.siteArray = temp
        } else {
          // 请求设备信息
          let url = baseurl + '/equip/getEquipMonitor'
          let header = {
            'Content-Type': 'application/json;charset=UTF-8',
            'Authorization':  this.$app.$data.shiroToken
          }
          let data = {
            authorization: this.$app.$data.boxToken,
            apiBaseUrl: 'http://fbcs101.fbox360.com/api/',
            boxNo: boxNo
          }
          // 处理请求到的设备组数据
          let callfunc = (res) => {
            this.equipArray = res
            res.forEach(element => {
              if (element.name == '远程') {
                let temp = []
                let cnt = 0
                for (let i = 1; i <= element.items.length; i++) {
                  const equip = element.items[i - 1]
                  temp.push(equip.name)
                  if (i % 3 == 0) {
                    this.controlArray.push({
                      name: 'group ' + cnt,
                      equipGroup: temp
                    })
                    cnt++
                    temp = []
                  }
                }
                console.log(this.controlArray)
              } else if (element.name == '传感') {
                // 捕捉传感器数据用于可视化
                let names = []
                element.items.forEach(equip => {
                  names.push(equip.name)
                })
                this.lineNames = names
              }
            })
          }
          this.$app.$def.post(url, data, header, callfunc)
        }
      }
    }
  },
  showEquipException () {
    // get异常
    let url = baseurl+'/equip/getExceptionSite'
    let header = {'Authorization':  this.$app.$data.shiroToken}
    let callfunc = (equipException) => {
      let str = '存在异常设备: \n'
      for (let i = 0; i < equipException.length; i++) {
        const exception = equipException[i]
        str += exception.object
        str += '\n\n'
      }
      this.$app.$def.alert(str)
    }
    this.$app.$def.get(url, header, callfunc)
  },
  refreshEquipCanvasData () {
    this.equipCanvasData = getRefreshEquipCanvasData(this.equipCanvasData)
  },
  // 设备控制, 在家无法测试暂时空缺
  undo () {
    this.$app.$def.alert('疫情期间，实验设备未开放')
    console.log('设备控制, 在家无法测试暂时空缺')
  }
}
// 筛选站点列表 保存站点名称/id/连接状态
//第一个数组为所有站点，第二个登录用户具有管理权限的站点
function getSiteArray (array,array1) {
  let ans = []
  for (let i = 0; i < array.length; i++) {
    for (let j = 0; j < array[i].child.length; j++) {
      for (let k = 0; k < array[i].child[j].child.length; k++) {
        let item = array[i].child[j].child[k]
        let temp = {}
        // 屏蔽校名
        let reg = /.*测试.*/
        //匹配用户权限内的站点
        let userArea = array1
        for(let i = 0;i < userArea.length - 1; i++){
          if (item.alias == userArea[i]){
            temp.name = reg.test(item.alias) ? '测试平台' : item.alias  
            temp.boxNo = item.boxNo
            temp.state = item.connectionState == 1 ? '在线' : '离线'
            ans.push(temp)
          } 
        } 
        /*temp.name = reg.test(item.alias) ? '测试平台' : item.alias  
        temp.boxNo = item.boxNo
        temp.state = item.connectionState == 1 ? '在线' : '离线'
        ans.push(temp)  */
      }
    }
  }
  return ans
}

// 初始化设备状态图表
function initEquipCanvasData(equipNames) {
  // {
  //   labels: ['', '', '', '', '', '', ''],
  //   datasets: [{
  //     label: 'My First dataset',
  //     backgroundColor: 'rgba(255, 0, 120, 0.2)',
  //     borderColor: 'rgba(255, 0, 120, 1)',
  //     data: [
  //       1, 3, 6, 2, 7, 4, 5
  //     ]
  //   }, {
  //     label: 'My Second dataset',
  //     backgroundColor: 'rgba(120, 250, 0, 0.2)',
  //     borderColor: 'rgba(120, 250, 0, 1)',
  //     data: [
  //       7, 4, 5,1, 3, 6, 2
  //     ],
  //   }]
  // },
  let newData = {}
  newData.labels = ['0']
  newData.datasets = []
  equipNames.forEach(name => {
    let item = {}
    let spname = name.split('_')
    item.label = spname[1] + '_' + spname[2] //去掉设备组标题
    item.backgroundColor = getRandomRGBA()
    item.borderColor = getRandomRGBA()
    item.data = [0]
    item.fill = false
    newData.datasets.push(item)
  })
  return newData
}
// 随机设备图表title颜色
function getRandomRGBA() {
  let r = Math.round(Math.random() * 255)
  let g = Math.round(Math.random() * 255)
  let b = Math.round(Math.random() * 255)
  let a = Math.round(Math.random() * 10) / 10
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')'
}
// 更新图表数据 采用随机模拟
function getRefreshEquipCanvasData(oldData) {
  let length = 7
  let myDate = new Date()
  let time = myDate.getHours() + ':' + myDate.getMinutes() + ':' + myDate.getSeconds()
  if (oldData.labels.length >= length) {
    oldData.labels.shift() 
  }
  oldData.labels.push(time)
  oldData.datasets.forEach(item => {
    if (item.data.length >= length) {
      item.data.shift()
    }
    item.data.push(Math.round(Math.random() * 20))
  })
  return oldData
}
</script>

<style>
  .site-page {
    width: 100%;
    flex-direction: column;
    align-items: center;
  }
  .select {
    margin-right: 100px;
  }
  .main {
    width: 100%;
    align-items: center;
    flex-direction: column;
  }
  .swiper-container {
    height: 300px;
  }
  #equip-state {
    height: 400px;
  }
  #equip-pie {
    height: 400px;
  }
  .canvas-container {
    align-items: center;
    flex-direction: column;
  }
  .control-container {
    margin-top: 10px;
  }
  .control-btn {
    width: 240px;
    border-radius: 43px;
    background-color: #ffd700;
    margin-right: 5px;
  }
</style>
