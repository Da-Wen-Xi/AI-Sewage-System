<template>
    <stack>
      <map 
        id="map"
        style="width:{{width}}; height:{{height}}" 
        scale="{{scale}}" 
        markers="{{markers}}"
        latitude="{{latitude}}"
        longitude="{{longitude}}"
        @markertap="markerTap"
      >
      </map>
      <div >
        <div class="card-container">
          <div class="card-img">
            <image src="{{site.value.pic}}" onerror="onImageError" style="height:200px; width:100%;"></image>
          </div>
          <text>站点: {{site.value.name}}</text>
          <text>能源: {{site.value.energy}}</text>
          <text>地址: {{site.value.address}}</text>
          <text>效率: {{site.value.efficiency}}</text>
          <text>经度: {{site.value.longitude}}</text>
          <text>纬度: {{site.value.latitude}}</text>
          <text>工艺: {{site.value.process}}</text>
          <text>水质: {{site.value.quality}}</text>
          <text>日期: {{site.value.date}}</text>
          <text>管理: {{site.value.operator}}</text>
          <text>联系: {{site.value.phone}}</text>
        </div>
      </div>
    </stack>
</template>

<script>
import prompt from '@system.prompt'
import {siteDetail} from '../../Common/js/siteDetail.js'

const MARKER_PATH = '/Common/pic/site.png'
const MARKER_SAMPLE = {
  id: -1,
  latitude: 0,
  longitude: 0,
  coordType: 'wgs84',
  iconPath: MARKER_PATH,
  callout: {
    content: 'null',
    padding: '20px 5px 20px 5px',
    borderRadius: '20px',
    textAlign: 'left',
    display: 'byclick'
  }
}
export default {
  data: {
    width: '100%',
    height: '100%',
    latitude: 0,
    longitude: 0,
    currentIndex: 0,
    scale: 10,
    markers: [],
    chooseUID: 0, //选择的标记点uid
    siteDetails: siteDetail, //设备相关的信息
    site: {}, //用于左上角展示的站点数据
    tapID: 0 //marker tap时记录的id
  },
  /**
   * @description 初始化地图数据
   */
  onInit () {
    this.markers = this.getMapMarkers()
    this.latitude = this.markers[0].latitude
    this.longitude = this.markers[0].longitude
    this.site = this.getSite(this.tapID)
  },    
  /**
   * @description 获取设备站点信息
   * @returns 站点地图makers列表
   */
  getMapMarkers () {
    let id = 0
    let markers = []
    let equipments = this.$app.$data.equipmentList
    for (let i = 0; i < equipments.length; i++) {
      // 省份信息->城市信息
      const cityArray = equipments[i].child
      for (let j = 0; j < cityArray.length; j++) {
        cityArray[j].child.forEach(site => {
          // 避免浅拷贝指向同一个对象
          let marker = JSON.parse(JSON.stringify(MARKER_SAMPLE))
          marker.id = id++ 
          marker.latitude = site.latitude
          marker.longitude = site.longitude
          marker.callout.content = site.alias
          markers.push(marker)
        })
      }
    }
    return markers
  },
  /**
   * @description 判定站点展示情况
   */
  markerTap (tap) {
    let markerID = 0
    if (isNaN(tap)) {
      markerID = tap.markerId
    } else {
      markerID = tap
    }
    this.tapID = markerID
    this.site = this.getSite(markerID)
  },
  /**
   * @description 在计算属性中使用的数据映射
   * 根据marker的id数据查找具体的站点信息
   */
  getSite (markerID) {
    let siteAlias = this.markers[markerID].callout.content
    // 根据别名查找站点id
    let siteUid = 0
    let equipments = this.$app.$data.equipmentList
    for (let i = 0; i < equipments.length; i++) {
      // 省份信息->城市信息
      const cityArray = equipments[i].child
      for (let j = 0; j < cityArray.length; j++) {
        cityArray[j].child.forEach(site => {
          if (site.alias === siteAlias) {
            siteUid = parseInt(site.uid) 
          }
        })
      }
    }
    // 查找到uid后 根据uid反查siteDetail的下标位置
    // 根据下标位置重置展示区域
    let site = {}
    for (let i = 0; i < this.siteDetails.length; i++) {
      if (siteUid === this.siteDetails[i].id) {
        site = this.siteDetails[i]
      }
    }
    return site
  },
  /**
   * @description 获取图片异常情况
   */
  onImageError() {
    prompt.showToast({
      message: '图片获取失败'
    })
  }
}

</script>

<style>
  .card-container {
    height: 45%;
    width: 65%;
    margin-top: 60px;
    margin-left: 20px;
    border-radius: 1px;
    flex-direction: column;
    background-color:rgba(255, 255, 255, 0.7);
    border-radius: 10px;
  }
  .card-img {
    justify-content: center;
    align-items: center;
  }
</style>
